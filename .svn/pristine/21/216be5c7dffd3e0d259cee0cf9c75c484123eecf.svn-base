package business.ordersubsystem;

import java.time.LocalDate;
import java.util.ArrayList;
import java.util.List;
import java.util.logging.Logger;

import middleware.exceptions.DatabaseException;
import business.BusinessConstants;
import business.SessionCache;
import business.exceptions.BackendException;
import business.externalinterfaces.CartItem;
import business.externalinterfaces.CustomerProfile;
import business.externalinterfaces.CustomerSubsystem;
import business.externalinterfaces.Order;
import business.externalinterfaces.OrderItem;
import business.externalinterfaces.OrderSubsystem;
import business.externalinterfaces.Product;
import business.externalinterfaces.ShoppingCart;
import business.productsubsystem.ProductImpl;
import business.shoppingcartsubsystem.CartItemImpl;
import business.usecasecontrol.ManageProductsController;
import business.usecasecontrol.ViewOrdersController;

public class OrderSubsystemFacade implements OrderSubsystem {
	private static final Logger LOG = Logger.getLogger(OrderSubsystemFacade.class.getPackage().getName());
	CustomerProfile custProfile;

	public OrderSubsystemFacade(CustomerProfile custProfile) {
		this.custProfile = custProfile;
	}

	/**
	 * Used by customer subsystem at login to obtain this customer's order
	 * history from the database. Assumes cust id has already been stored into
	 * the order subsystem facade This is created by using auxiliary methods at
	 * the bottom of this class file. First get all order ids for this customer.
	 * For each such id, get order data and form an order, and with that order
	 * id, get all order items and insert into the order.
	 */
	public List<Order> getOrderHistory() throws BackendException {
		CustomerSubsystem css = (CustomerSubsystem) SessionCache.getInstance().get(BusinessConstants.CUSTOMER);
		DbClassOrder orderDbClass = new DbClassOrder();
		List<Order> orderList = new ArrayList<>();
		try {
			List<Integer> orderIds = orderDbClass.getAllOrderIds(css.getCustomerProfile());
			for (int i=0;i<orderIds.size();i++) {
				Order order = new OrderImpl();
				System.out.println("orderid in getOrderHistory: "+ orderIds.get(i));
				order = orderDbClass.getOrderData(orderIds.get(i));
				orderList.add(order);
			}
			
		
		} catch (DatabaseException e) {
			e.printStackTrace();
		}
		return orderList;
		// return ViewOrdersController.INSTANCE.getOrderHistory(css);
	}

	public void submitOrder(ShoppingCart cart) throws BackendException {
		System.out.println("in ordersubsystemFacade");
		DbClassOrder dbClassOrder = new DbClassOrder();
		int orderId = 1;
		String orderDate = LocalDate.now().toString();
		double totalPrice = presentation.util.Util.computeTotal(cart.getCartItems());
		
		Order ord = createOrder(orderId, orderDate, String.valueOf(totalPrice));
		List<OrderItem> items = new ArrayList<>();
		for (int i = 0; i < cart.getCartItems().size(); i++) {
			CartItem cartitem = cart.getCartItems().get(i);
			OrderItem item = createOrderItem(cartitem.getProductid(), orderId, cartitem.getQuantity(), cartitem.getTotalprice());
			items.add(item);
		}
		ord.setOrderItems(items);
		
		ord.setShipAddress(business.util.DataUtil.readCustFromCache().getDefaultShippingAddress());
		ord.setBillAddress(business.util.DataUtil.readCustFromCache().getDefaultBillingAddress());
		ord.setPaymentInfo(business.util.DataUtil.readCustFromCache().getDefaultPaymentInfo());
	
		try {
			dbClassOrder.submitOrder(this.custProfile, ord);
		} catch (DatabaseException e) {
			e.printStackTrace();
		}
	}

	/**
	 * Used whenever an order item needs to be created from outside the order
	 * subsystem
	 */
	public static OrderItem createOrderItem(Integer prodId, Integer orderId, String quantityReq, String totalPrice) {
		OrderItem orderItem = null;
		try {
			Product product = (ProductImpl) ManageProductsController.INSTANCE.getProductById(prodId);
			String name = product.getProductName();
			int quantity = Integer.parseInt(quantityReq);
			Double price = Double.parseDouble(totalPrice);
			orderItem = new OrderItemImpl(name, quantity, price);
			orderItem.setOrderId(orderId);

		} catch (BackendException e) {
			e.printStackTrace();
		}

		return orderItem;
	}

	/** to create an Order object from outside the subsystem */
	public static Order createOrder(Integer orderId, String orderDate, String totalPrice) {
		OrderImpl ord = new OrderImpl();
		ord.setOrderId(orderId);
		ord.setDate(LocalDate.now());
		
		return ord;
	}

	///////////// Methods internal to the Order Subsystem -- NOT public
	List<Integer> getAllOrderIds() throws DatabaseException {
		DbClassOrder dbClass = new DbClassOrder();
		return dbClass.getAllOrderIds(custProfile);

	}

	/** Part of getOrderHistory */
	List<OrderItem> getOrderItems(Integer orderId) throws DatabaseException {
		DbClassOrder dbClass = new DbClassOrder();
		return dbClass.getOrderItems(orderId);
	}

	/**
	 * Uses cust id to locate top-level order data for customer -- part of
	 * getOrderHistory
	 */
	OrderImpl getOrderData(Integer custId) throws DatabaseException {
		DbClassOrder dbClass = new DbClassOrder();
		return dbClass.getOrderData(custId);
	}
}
