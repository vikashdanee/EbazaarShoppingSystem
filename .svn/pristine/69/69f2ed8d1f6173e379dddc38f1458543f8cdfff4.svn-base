package presentation.control;

import java.util.List;
import java.util.Map;

import org.springframework.stereotype.Controller;
import org.springframework.ui.ModelMap;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;

import business.BusinessConstants;
import business.SessionCache;
import business.externalinterfaces.Address;
import business.externalinterfaces.CartItem;
import business.externalinterfaces.CustomerProfile;
import business.externalinterfaces.CustomerSubsystem;
import business.externalinterfaces.OrderSubsystem;
import business.ordersubsystem.OrderSubsystemFacade;
import javafx.collections.ObservableList;
import presentation.data.AddressPres;
import presentation.data.BrowseSelectData;
import presentation.data.CartItemPres;
import presentation.data.CheckoutData;
import presentation.data.DefaultData;
import presentation.gui.GuiConstants;

@Controller
public class CheckoutUIControl {
	
	@RequestMapping(value="/shippingbilling",method=RequestMethod.GET)
	public String proceedFromCartToShipBill(ModelMap modelMap){
		if(!SessionCache.getInstance().containsKey(BusinessConstants.CUSTOMER)){
			return "redirect:/login/callback/shippingbilling";
		}
		else{
			System.out.println("proceedFromCartToShipBill");
			CheckoutData data = CheckoutData.INSTANCE;
			//CustomerProfile custProfile = data.getCustomerProfile();
			Address defaultShipAddress = data.getDefaultShippingData();
			AddressPres uiShipAddress=new AddressPres();
			AddressPres uiBillAddress=new AddressPres();
			Address defaultBillAddress = data.getDefaultBillingData();
			uiBillAddress.setAddress(defaultBillAddress);
			uiShipAddress.setAddress(defaultShipAddress);
			modelMap.addAttribute("shippingAddress", uiShipAddress);
			modelMap.addAttribute("billingAddress",uiBillAddress);
			
			return "shippingbilling";
		}
	}
	
	@RequestMapping(value="/selectshipaddress",method=RequestMethod.GET)
	public String selectshipAddress(ModelMap modelMap){
		modelMap.addAttribute("addressList",DefaultData.ADDRESSES_ON_FILE);
		modelMap.addAttribute("title","Shipping Address");
		return "selectaddress";
	}
	
	@RequestMapping(value="/selectbilladdress",method=RequestMethod.GET)
	public String selectbillAddress(ModelMap modelMap){
		modelMap.addAttribute("addressList",DefaultData.ADDRESSES_ON_FILE);
		modelMap.addAttribute("title","Billing Address");
		return "selectaddress";
	}
	
	@RequestMapping(value="/payment",method=RequestMethod.POST)
	public String proceedToPayment(@RequestParam Map<String, String> allRequestParams, ModelMap modelMap){
		System.out.println("submitAddress:: shipping address " + allRequestParams.get("shippingStreet"));
		System.out.println("submitAddress:: billing address " + allRequestParams.get("billingStreet"));
		
		CustomerSubsystem css = (CustomerSubsystem)SessionCache.getInstance().get(BusinessConstants.CUSTOMER);
		
		System.out.println("Customer ID : " + css.getCustomerProfile().getCustId());
		modelMap.addAttribute("ccard",DefaultData.DEFAULT_PAYMENT_INFO);
		return "payment";
	}
	
	@RequestMapping(value="/terms",method=RequestMethod.POST)
	public String proceedToTermsAndCondition(ModelMap modelMap){
		return "redirect:/terms";
	}
	
	@RequestMapping(value="/finalorder")
	public String proceedToFinalOrder(ModelMap modelMap){
		List<CartItemPres> finalOrder = BrowseSelectData.INSTANCE.getCartData2();
		modelMap.addAttribute("finalOrders", finalOrder);
		return "finalorder";
	}
	
	@RequestMapping(value="terms",method=RequestMethod.GET)
	public String proceedToTermsAndConditionget(ModelMap modelMap){
		modelMap.addAttribute("terms",GuiConstants.TERMS_MESSAGE);
		return "termsncondition";
	}
	
	@RequestMapping(value="successfull",method=RequestMethod.GET)
	public String proceedToSuccessfullSubmission(ModelMap modelMap){
		return "successfull";
	}
	
}
